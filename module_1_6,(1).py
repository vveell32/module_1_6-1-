# phone_book = {"Ksen": 89003002020, "Well": 89004003030} #пара_ключ_и_значение через двоеточие пречисление через запятую
# # Скобки{} значение должно быть неизменяемым объектом ""
# # #лист не пойдет []
# print(phone_book)
# print(phone_book["Ksen"]) # обращение с помощью индексации
# phone_book["Ksen"] = 123456789# замена номера
# print(phone_book)
# phone_book["Alis"] = 89634567485# Добавился_еще_один_элемент в книгу
# print(phone_book)
# del phone_book["Ksen"]# Удаление по ключу ["Ksen"]
# print(phone_book)
# phone_book.update({"Sam": 678545322, #  Метод апдейт добавляет значения в список по несколько
#                    "Alexei": 8956423145,
#                    "Nata": 8945623125})
# print(phone_book)
# print(phone_book.get("Ksen", "Ушла_за_хлебом")) # команда .get опрашивает значение в скобках и выдает номер из пары
# # если значение не найдено то выдаст None  либо то что будет установлено в кавычках через запятую "Ушла_за_хлебом"
# # phone_book.pop("Well") #Метод .pop  вытаскивает значение из списка и оставляет его здесь.
# # a = phone_book.pop("Well")
# # print(a)  не работает не понимаю что такое обратная трассировка
# list_ = [1, 2, 3, 4]
# list_.pop(0)
# b = list_.pop(0)
# print(list_)
# print(b) #работает не верно должен доставать значение [1] из листа
# print(phone_book.keys()) # метод позволяет вытащить все ключи из словаря
# print(phone_book.values()) # метод возвращающий значение (номер из телефонной книги)
# print(phone_book.items()) #  пара ключ и значениие
# # ====================================================================================================================
# set_ = {1, 2, 3, 4, 5, 1, 2, 3, 4} #множество
# print(set_)  #выводятся не повторяемые элементы12345
# set_ = {1, 2, 3, 4, 5, 1, 2, 3, 4, "string", True, (1, 2, 3)}
# print(set_) # внутри множества могут быть значения строки утверждения и кортежи/все внутри таких скобок { }
# list_ = [1, 1, 1, 1, 2, 3, 2, 2]
# list_ =set(list_)# команда set переделывает список во множество
# print(list_)
# print(list_.discard(1))# remove  и discard удаляют заданное значение из множества
# #.discard в отличии от .remove НЕ будет давать ошибку если элемент не был найден во множестве
# print(list_)
# print(list_.add(5)) # .add добавляет во множество необходимое значение
# print(list_)
# ========================================================================================================================


my_dict = {"Age": 37, "Year_of_birth": 1987}
print(my_dict)
print(my_dict["Age"])
my_dict["Height"]= 176
print(my_dict["Height"])
my_dict.update({"Weight": 75, "Date of birth": 240987})
print(my_dict)
print(my_dict.pop("Weight"))
print("Удаленный контакт: ", ("Weight"))
print(my_dict)
my_set = {75, 75, 75, 240987, True, "Happy_birth_day", True, (1, 2, 3)}
print(my_set.add(22))
print(my_set.add(66))
print(my_set)
print(my_set.remove(75))
print(my_set)
